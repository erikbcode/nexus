// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  username      String?   @unique

  // Non-Next Auth
  posts             Post[]
  votes             Vote[]
  comments          Comment[]
  commentVotes      CommentVote[]
  createdSubnexuses Subnexus[]     @relation("createdBy")
  subscriptions     Subscription[]
}

model Subnexus {
  id          String         @id @default(cuid())
  name        String         @unique
  creatorId   String
  creator     User           @relation("createdBy", fields: [creatorId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  posts       Post[]
  subscribers Subscription[]

  @@index([creatorId])
  @@index([name])
}

model Subscription {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  subnexus   Subnexus @relation(fields: [subnexusId], references: [id])
  subnexusId String

  @@id([userId, subnexusId])
  @@index([userId])
  @@index([subnexusId])
}

model Post {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  title      String
  text       String
  image      String?
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  subnexus   Subnexus  @relation(fields: [subnexusId], references: [id])
  subnexusId String
  comments   Comment[]
  votes      Vote[]

  @@index([authorId])
  @@index([subnexusId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  replyToId String?
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[]     @relation("ReplyTo")
  votes     CommentVote[]

  @@index([replyToId])
  @@index([authorId])
  @@index([postId])
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type   VoteType

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
  @@index([userId])
  @@index([commentId])
}
